from flask import Flask, jsonify, request
import random
from flask_cors import CORS
import os
from pymongo import MongoClient
from datetime import datetime

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã

client = MongoClient("mongodb+srv://nchetenov:hTneAHtiyasno@cluster0.jqonf4c.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0")  
db = client["droplix"]
users_collection = db["users"]

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route("/api/user", methods=["POST"])
def register_or_get_user():
    data = request.json
    telegram_id = data.get("telegram_id")
    username = data.get("username", "")

    if not telegram_id:
        return jsonify({"error": "telegram_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}), 400

    user = users_collection.find_one({"telegram_id": telegram_id})
    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        return jsonify({
            "telegram_id": user["telegram_id"],
            "username": user.get("username", ""),
            "balance": user.get("balance", 0),
            "history": user.get("history", [])
        })

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º –∏ –ø—É—Å—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π
    new_user = {
        "telegram_id": telegram_id,
        "username": username,
        "balance": 1000,
        "history": []
    }
    users_collection.insert_one(new_user)

    return jsonify(new_user)

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@app.route("/api/user/balance", methods=["POST"])
def update_balance():
    data = request.json
    telegram_id = data.get("telegram_id")
    amount = data.get("amount")  # —Å—É–º–º–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π)

    if not telegram_id or amount is None:
        return jsonify({"error": "telegram_id –∏ amount –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}), 400

    user = users_collection.find_one({"telegram_id": telegram_id})
    if not user:
        return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

    new_balance = user.get("balance", 0) + amount
    if new_balance < 0:
        return jsonify({"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"}), 400

    users_collection.update_one(
        {"telegram_id": telegram_id},
        {"$set": {"balance": new_balance}}
    )

    return jsonify({"balance": new_balance})

# –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–µ–π—Å–æ–≤ —Å –ø—Ä–∏–∑–∞–º–∏ –∏ —à–∞–Ω—Å–∞–º–∏
CASES = {
    "case1": {
        "name": "–ú—è–≥–∫–∏–µ –∏–≥—Ä—É—à–∫–∏",
        "prizes": [
            {"name": "–ú–∏—à–∫–∞ üß∏", "chance": 50},
            {"name": "–ö—Ä–æ–ª–∏–∫ üê∞", "chance": 30},
            {"name": "–ü—É—Å—Ç–æ üôÅ", "chance": 20}
        ]
    },
    "case2": {
        "name": "–ü—Ä–µ–º–∏—É–º –∫–µ–π—Å",
        "prizes": [
            {"name": "Telegram Premium üéÅ", "chance": 5},
            {"name": "–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞ üí≥", "chance": 15},
            {"name": "–ü—É—Å—Ç–æ üôÅ", "chance": 80}
        ]
    },
    "case3": {
        "name": "–§—Ä—É–∫—Ç–æ–≤—ã–π –∫–µ–π—Å",
        "prizes": [
            {"name": "–Ø–±–ª–æ–∫–æ üçé", "chance": 40},
            {"name": "–ë–∞–Ω–∞–Ω üçå", "chance": 30},
            {"name": "–ê–ø–µ–ª—å—Å–∏–Ω üçä", "chance": 20},
            {"name": "–ü—É—Å—Ç–æ üôÅ", "chance": 10}
        ]
    }
}

@app.route("/")
def home():
    return "DroplixBot API is running"

@app.route("/api/cases", methods=["GET"])
def get_cases():
    # –í–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –∫–µ–π—Å–æ–≤ —Å id –∏ –∏–º–µ–Ω–∞–º–∏
    cases_list = [{"id": case_id, "name": case["name"]} for case_id, case in CASES.items()]
    return jsonify(cases_list)

@app.route("/api/open-case", methods=["POST"])
def open_case():
    data = request.json
    telegram_id = data.get("telegram_id")
    case_id = data.get("case_id")

    if not telegram_id or not case_id:
        return jsonify({"error": "–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã"}), 400

    user = users_collection.find_one({"telegram_id": telegram_id})
    if not user:
        return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

    case = CASES.get(case_id)
    if not case:
        return jsonify({"error": "–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

    choices = [p["name"] for p in case["prizes"]]
    weights = [p["chance"] for p in case["prizes"]]
    prize = random.choices(choices, weights=weights, k=1)[0]

    users_collection.update_one(
        {"telegram_id": telegram_id},
        {"$push": {
            "history": {
                "prize": prize,
                "date": datetime.utcnow().isoformat(),
                "case_id": case_id
            }
        }}
    )

    return jsonify({"prize": prize})

@app.route("/api/history/<int:telegram_id>", methods=["GET"])
def get_history(telegram_id):
    user = users_collection.find_one({"telegram_id": telegram_id})
    if not user:
        return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

    return jsonify(user.get("history", []))


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    app.run(host="0.0.0.0", port=port)
